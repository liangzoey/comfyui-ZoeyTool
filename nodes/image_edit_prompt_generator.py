import re

class 图像编辑提示词生成器:
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "编辑类型": ([
                    "文字编辑", 
                    "对象编辑", 
                    "风格转换", 
                    "虚拟试穿", 
                    "背景替换", 
                    "视角转换", 
                    "原创IP编辑",
                    "定点文字修复",
                    "对象添加",
                    "对象移除",
                    "自定义"  # 新增自定义选项
                ], {"default": "对象移除"}),
                "目标元素": ("STRING", {"default": "头部", "placeholder": "要编辑的元素（如：文字、衬衫、背景等）"}),
            },
            "optional": {
                "新值": ("STRING", {"default": "帽子", "placeholder": "新的值/属性（如：'通义实验室'、蓝色、海滩等）"}),
                "位置信息": ("STRING", {"default": "", "placeholder": "位置信息（如：红色框内、前景等）"}),
                "约束条件": ("STRING", {"default": "", "placeholder": "约束条件（如：只修改框内、保持外部不变等）"}),
                "风格参考": ("STRING", {"default": "", "placeholder": "风格参考（如：吉卜力、3D卡通等）"}),
                "视角方向": (["正面", "左侧", "右侧", "背面"], {"default": "正面"}),
                "动作描述": ("STRING", {"default": "", "placeholder": "动作描述（如：拿着篮球、浇水等）"}),
                "服装描述": ("STRING", {"default": "", "placeholder": "服装描述（如：运动服、宇航服等）"}),
                "自定义提示词": ("STRING", {"default": "", "placeholder": "直接输入自定义提示词"}),  # 新增自定义提示词输入
            }
        }
    
    RETURN_TYPES = ("STRING",)
    RETURN_NAMES = ("编辑提示词",)
    FUNCTION = "生成提示词"
    CATEGORY = "图像编辑"

    def 生成提示词(self, 编辑类型, 目标元素, 新值="", 位置信息="", 约束条件="", 
               风格参考="", 视角方向="正面", 动作描述="", 服装描述="", 自定义提示词=""):
        """
        根据选择的编辑类型生成符合图片示例格式的提示词
        """
        # 如果选择自定义类型，直接返回自定义提示词
        if 编辑类型 == "自定义":
            return (自定义提示词,)
        
        # 初始化提示词变量
        提示词 = ""
        
        # 根据编辑类型生成对应的提示词格式
        if 编辑类型 == "文字编辑":
            # 内置默认内容：霓裳汉服社 -> 通义实验室
            目标元素 = 目标元素 if 目标元素 else "霓裳汉服社"
            新值 = 新值 if 新值 else "通义实验室"
            位置信息 = 位置信息 if 位置信息 else "红色框内"
            
            提示词 = f"把{位置信息}的文字'{目标元素}'改成'{新值}'"
        
        elif 编辑类型 == "对象编辑":
            # 内置默认内容：女人 -> 男人穿汉服
            目标元素 = 目标元素 if 目标元素 else "女人"
            新值 = 新值 if 新值 else "男人穿汉服"
            
            提示词 = f"把{目标元素}替换为{新值}"
            if 位置信息:
                提示词 += f"，位置在{位置信息}"
        
        elif 编辑类型 == "风格转换":
            # 内置默认内容：吉卜力风格
            风格参考 = 风格参考 if 风格参考 else "吉卜力"
            目标元素 = 目标元素 if 目标元素 else "T恤"
            新极值 = 新值 if 新值 else "黑色的印有'Qwen'文字的T恤"
            
            提示词 = f"转变成{风格参考}风格，把{目标元素}变成{新值}"
        
        elif 编辑类型 == "虚拟试穿":
            # 内置默认内容：圆点衬衫 -> 浅蓝色衬衫
            目标元素 = 目标元素 if 目标元素 else "圆点衬衫"
            新值 = 新值 if 新值 else "浅蓝色衬衫"
            
            提示极词 = f"用{新值}替换{目标元素}"
        
        elif 编辑类型 == "背景替换":
            # 内置默认内容：海滩
            新值 = 新值 if 新值 else "海滩"
            
            提示词 = f"将背景修改为{新值}"
        
        elif 编辑类型 == "视角转换":
            # 内置默认内容：左侧
            视角方向 = 视角方向 if 视角方向 != "正面" else "左侧"
            
            提示词 = f"朝向{视角方向}"
        
        elif 编辑类型 == "原创IP编辑":
            # 内置默认内容：小熊形象
            目标元素 = 目标元素 if 目标元素 else "这只熊"
            动作描述 = 动作描述 if 动作描述 else "拿着五彩画板和画笔"
            服装描述 = 服装描述 if 服装描述 else "穿着白T恤"
            新值 = 新值 if 新值 else "站在画板前画画"
            
            提示词 = f"{目标元素}，{动作描述}，{服装描述}，{新值}"
        
        elif 编辑类型 == "定点文字修复":
            # 内置默认内容：稽
            位置信息 = 位置信息 if 位置信息 else "红框内"
            新值 = 新值 if 新值 else "稽"
            约束条件 = 约束条件 if 约束条件 else "只修改框内，保持外部不变"
            
            提示词 = f"把{位置信息}的文字修正为'{新值}'，{约束条件}"
        
        elif 编辑类型 == "对象添加":
            # 内置默认内容：企鹅前面的小木牌
            位置信息 = 位置信息 if 位置信息 else "企鹅前面"
            新值 = 新值 if 新值 else "写着'Welcome to Penguin Beach'的小木牌"
            
            提示词 = f"在{位置信息}添加{新值}"
        
        elif 编辑类型 == "对象移除":
            # 内置默认内容：头部 -> 帽子
            目标元素 = 目标元素 if 目标元素 else "头部"
            新值 = 新值 if 新值 else "帽子"
            
            if 新值:
                提示词 = f"移除{目标元素}并替换为{新值}"
            else:
                提示词 = f"移除{目标元素}"
        
        # 添加约束条件（除定点文字修复外）
        if 约束条件 and 编辑类型 != "定点文字修复":
            提示词 += f"，{约束条件}"
        
        # 清理多余的逗号和空格
        提示词 = re.sub(r"，+", "，", 提示词)
        提示词 = 提示词.strip("，").strip()
        
        return (提示词,)

# 节点注册
NODE_CLASS_MAPPINGS = {
    "图像编辑提示词生成器": 图像编辑提示词生成器
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "图像编辑提示词生成器": "zoey🖼🖼🖼️ 图像编辑提示词生成器"
}